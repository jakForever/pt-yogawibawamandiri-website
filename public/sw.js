// Service Worker for PT. Yoga Wibawa Mandiri PWA
const CACHE_NAME = 'pt-ywm-v1.0.0';
const OFFLINE_URL = '/offline.html';

// URLs to cache on install
const urlsToCache = [
  '/',
  '/offline.html',
  '/manifest.json',
  '/ywm-logo-transparent.svg',
  '/semen-padang-logo-transparent.svg',
  // Add critical CSS and JS files (these will be generated by Vite)
];

// Install event
self.addEventListener('install', (event) => {
  console.log('[SW] Install event');
  
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('[SW] Caching app shell');
        return cache.addAll(urlsToCache);
      })
      .then(() => {
        // Skip waiting to activate immediately
        return self.skipWaiting();
      })
  );
});

// Activate event
self.addEventListener('activate', (event) => {
  console.log('[SW] Activate event');
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('[SW] Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      // Take control of all pages immediately
      return self.clients.claim();
    })
  );
});

// Fetch event - Network First strategy for API calls, Cache First for static assets
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }

  // Skip chrome-extension and other non-http requests
  if (!url.protocol.startsWith('http')) {
    return;
  }

  // API calls - Network First
  if (url.pathname.startsWith('/api/') || url.hostname.includes('supabase')) {
    event.respondWith(
      fetch(request)
        .then((response) => {
          // Clone the response before caching
          const responseClone = response.clone();
          
          if (response.status === 200) {
            caches.open(CACHE_NAME).then((cache) => {
              cache.put(request, responseClone);
            });
          }
          
          return response;
        })
        .catch(() => {
          // Return cached version if available
          return caches.match(request);
        })
    );
    return;
  }

  // Static assets and pages - Cache First
  event.respondWith(
    caches.match(request)
      .then((cachedResponse) => {
        if (cachedResponse) {
          return cachedResponse;
        }

        return fetch(request)
          .then((response) => {
            // Don't cache if not a valid response
            if (!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }

            // Clone the response
            const responseToCache = response.clone();

            caches.open(CACHE_NAME)
              .then((cache) => {
                cache.put(request, responseToCache);
              });

            return response;
          })
          .catch(() => {
            // If this is a page request, return the offline page
            if (request.mode === 'navigate' || request.headers.get('accept').includes('text/html')) {
              return caches.match(OFFLINE_URL);
            }
          });
      })
  );
});

// Background sync for offline form submissions
self.addEventListener('sync', (event) => {
  console.log('[SW] Background sync:', event.tag);
  
  if (event.tag === 'contact-form-sync') {
    event.waitUntil(syncContactForms());
  } else if (event.tag === 'order-form-sync') {
    event.waitUntil(syncOrderForms());
  }
});

// Push notification handler
self.addEventListener('push', (event) => {
  console.log('[SW] Push received:', event);
  
  const options = {
    body: event.data ? event.data.text() : 'Pesan baru dari PT. Yoga Wibawa Mandiri',
    icon: '/ywm-logo-new.svg',
    badge: '/ywm-logo-new.svg',
    vibrate: [200, 100, 200],
    data: {
      url: '/'
    },
    actions: [
      {
        action: 'open',
        title: 'Buka Website'
      },
      {
        action: 'close',
        title: 'Tutup'
      }
    ]
  };

  event.waitUntil(
    self.registration.showNotification('PT. Yoga Wibawa Mandiri', options)
  );
});

// Notification click handler
self.addEventListener('notificationclick', (event) => {
  console.log('[SW] Notification click:', event);
  
  event.notification.close();
  
  if (event.action === 'open') {
    event.waitUntil(
      clients.openWindow(event.notification.data.url || '/')
    );
  }
});

// Helper function to sync contact forms
async function syncContactForms() {
  try {
    // Get pending contact forms from IndexedDB
    const pendingForms = await getPendingContactForms();
    
    for (const form of pendingForms) {
      try {
        const response = await fetch('/api/contact', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(form.data)
        });
        
        if (response.ok) {
          await removePendingContactForm(form.id);
          console.log('[SW] Contact form synced successfully');
        }
      } catch (error) {
        console.error('[SW] Failed to sync contact form:', error);
      }
    }
  } catch (error) {
    console.error('[SW] Contact form sync failed:', error);
  }
}

// Helper function to sync order forms
async function syncOrderForms() {
  try {
    // Get pending order forms from IndexedDB
    const pendingOrders = await getPendingOrderForms();
    
    for (const order of pendingOrders) {
      try {
        const response = await fetch('/api/orders', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(order.data)
        });
        
        if (response.ok) {
          await removePendingOrderForm(order.id);
          console.log('[SW] Order form synced successfully');
        }
      } catch (error) {
        console.error('[SW] Failed to sync order form:', error);
      }
    }
  } catch (error) {
    console.error('[SW] Order form sync failed:', error);
  }
}

// IndexedDB helpers (simplified - you might want to use a library like idb)
function getPendingContactForms() {
  return new Promise((resolve) => {
    // Mock implementation - replace with actual IndexedDB logic
    resolve([]);
  });
}

function removePendingContactForm(id) {
  return new Promise((resolve) => {
    // Mock implementation - replace with actual IndexedDB logic
    resolve();
  });
}

function getPendingOrderForms() {
  return new Promise((resolve) => {
    // Mock implementation - replace with actual IndexedDB logic
    resolve([]);
  });
}

function removePendingOrderForm(id) {
  return new Promise((resolve) => {
    // Mock implementation - replace with actual IndexedDB logic
    resolve();
  });
}

// Update check
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
